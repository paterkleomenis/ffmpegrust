name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v1.0.0"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: ffmpegrust-linux-x86_64
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: ffmpegrust-macos-aarch64
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: ffmpegrust-windows-x86_64
            extension: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          winget install --id=Gyan.FFmpeg -e

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/ffmpegrust${{ matrix.extension }} release/
          chmod +x release/ffmpegrust${{ matrix.extension }}

      - name: Copy binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\ffmpegrust${{ matrix.extension }} release\

      - name: Copy additional files
        shell: bash
        run: |
          cp README.md release/
          cp LICENSE* release/ 2>/dev/null || echo "No LICENSE file found"

          # Create installation and startup scripts for each platform
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows installation script
            cat > release/install.bat << 'EOF'
          @echo off
          echo Installing FFmpeg Converter Pro...

          REM Check if FFmpeg is installed
          where ffmpeg >nul 2>&1
          if errorlevel 1 (
              echo FFmpeg not found. Installing FFmpeg...
              winget install --id=Gyan.FFmpeg -e
              if errorlevel 1 (
                  echo Failed to install FFmpeg automatically.
                  echo Please install FFmpeg manually from: https://www.gyan.dev/ffmpeg/builds/
                  pause
                  exit /b 1
              )
          ) else (
              echo FFmpeg is already installed.
          )

          echo Installation complete!
          echo You can now run ffmpegrust.exe
          pause
          EOF

            # Windows run script
            cat > release/run.bat << 'EOF'
          @echo off
          REM Check if FFmpeg is available
          where ffmpeg >nul 2>&1
          if errorlevel 1 (
              echo FFmpeg not found! Please run install.bat first.
              pause
              exit /b 1
          )
          ffmpegrust.exe
          EOF
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS installation script
            cat > release/install.sh << 'EOF'
          #!/bin/bash
          echo "Installing FFmpeg Converter Pro..."

          # Check if Homebrew is installed
          if ! command -v brew &> /dev/null; then
              echo "Homebrew not found. Installing Homebrew..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi

          # Check if FFmpeg is installed
          if ! command -v ffmpeg &> /dev/null; then
              echo "FFmpeg not found. Installing FFmpeg..."
              brew install ffmpeg
          else
              echo "FFmpeg is already installed."
          fi

          echo "Installation complete!"
          echo "You can now run ./ffmpegrust"
          EOF
          chmod +x release/install.sh

            # macOS run script
            cat > release/run.sh << 'EOF'
          #!/bin/bash
          # Check if FFmpeg is available
          if ! command -v ffmpeg &> /dev/null; then
              echo "FFmpeg not found! Please run ./install.sh first."
              exit 1
          fi
          ./ffmpegrust
          EOF
          chmod +x release/run.sh
          else
            # Linux run script (assumes FFmpeg is available via package manager)
            echo "#!/bin/bash" > release/run.sh
            echo "./ffmpegrust" >> release/run.sh
            chmod +x release/run.sh
          fi

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd release
          tar -czf ../${{ matrix.name }}.tar.gz *

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          7z a -tzip ../${{ matrix.name }}.zip *

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -la

      - name: Get tag name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## FFmpeg Converter Pro ${{ steps.get_tag.outputs.tag }}

          A modern, professional GUI application for video conversion and remuxing built with Rust.

          ### ðŸš€ Features
          - **Hardware Acceleration**: NVIDIA NVENC, Intel QSV, AMD VCE support
          - **Multi-threaded**: Efficient CPU utilization with async processing
          - **Real-time Monitoring**: Frame count, FPS, speed, ETA tracking
          - **Fast Remuxing**: Container changes without re-encoding (20-50x speed)
          - **Auto-Updates**: Built-in update system with automatic downloads

          ### ðŸ“¦ Installation

          1. Download the appropriate archive for your platform below
          2. Extract the archive to your desired location
          3. **Easy Installation**:
             - **Windows**: Run `install.bat` (installs FFmpeg automatically), then use `run.bat` or `ffmpegrust.exe`
             - **macOS**: Run `./install.sh` (installs FFmpeg via Homebrew), then use `./run.sh` or `./ffmpegrust`
             - **Linux**: Install FFmpeg via your package manager: `sudo apt install ffmpeg` (Ubuntu/Debian) or `sudo dnf install ffmpeg` (Fedora/RHEL), then run `./ffmpegrust`

          ### ðŸ“‹ Platform Support
          - **Linux x86_64**: Compatible with most modern Linux distributions
          - **macOS ARM64**: Apple Silicon Macs (M1/M2/M3/M4) - macOS 11.0+
          - **Windows x86_64**: Windows 10/11 with automatic FFmpeg installation

          ### ðŸ”„ Auto-Updates
          This version includes built-in auto-update functionality:
          - Checks for updates automatically every 24 hours
          - Manual update checking via Help menu
          - One-click download and installation
          - No need to manually download future updates

          ### ðŸŽ¯ Quick Start
          1. Select input video file
          2. Choose output location
          3. Pick a preset (Web Optimized, High Quality, etc.)
          4. Click Convert and monitor real-time progress

          ### ðŸ”§ Troubleshooting
          - Ensure FFmpeg is installed and available in your system PATH
          - For hardware acceleration, install appropriate drivers (NVIDIA, Intel, AMD)
          - Check the README.md for detailed setup instructions

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.get_tag.outputs.tag }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: FFmpeg Converter Pro ${{ steps.get_tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            ffmpegrust-linux-x86_64/*.tar.gz
            ffmpegrust-macos-aarch64/*.tar.gz
            ffmpegrust-windows-x86_64/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
