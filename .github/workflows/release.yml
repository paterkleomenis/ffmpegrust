name: Release Build

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "v1.0.0"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: ffmpegrust-linux-x86_64
            executable: ffmpegrust
          - os: macos-latest
            target: aarch64-apple-darwin
            name: ffmpegrust-macos-aarch64
            executable: ffmpegrust
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: ffmpegrust-windows-x86_64
            executable: ffmpegrust.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          # No additional dependencies needed for macOS

      - name: Setup Windows environment
        if: matrix.os == 'windows-latest'
        run: |
          # Ensure proper Windows build environment
          echo "Windows build environment ready"

      - name: Clear cargo cache
        run: cargo clean

      - name: Check Rust and Cargo versions
        run: |
          rustc --version
          cargo --version

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Verify binary exists
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ls -la target/${{ matrix.target }}/release/ffmpegrust.exe
          else
            ls -la target/${{ matrix.target }}/release/ffmpegrust
          fi

      - name: Copy and rename executable
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/ffmpegrust.exe ${{ matrix.name }}.exe
          else
            cp target/${{ matrix.target }}/release/ffmpegrust ${{ matrix.name }}
            chmod +x ${{ matrix.name }}
          fi

      - name: Verify executable created
        shell: bash
        run: |
          echo "Created executable:"
          ls -la ${{ matrix.name }}*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}*
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la

      - name: Get tag name
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: FFmpeg Converter Pro ${{ steps.get_tag.outputs.tag }}
          body: |
            ## FFmpeg Converter Pro ${{ steps.get_tag.outputs.tag }}

            ### Downloads
            - **Linux (x86_64)**: `ffmpegrust-linux-x86_64`
            - **macOS (Apple Silicon)**: `ffmpegrust-macos-aarch64`
            - **Windows (x86_64)**: `ffmpegrust-windows-x86_64.exe`

            ### Installation
            1. Download the appropriate executable for your platform
            2. Run the executable directly (make executable on Unix systems with `chmod +x`)

            ### Requirements
            **FFmpeg must be installed** on your system:
            - **Windows**: `winget install Gyan.FFmpeg`
            - **macOS**: `brew install ffmpeg`
            - **Linux**: `sudo apt install ffmpeg` (or equivalent for your distro)

            ### Changes
            - Cross-platform GUI for FFmpeg video conversion
            - Support for common video formats and codecs
            - Simple, intuitive interface
            - Automatic updates
          files: |
            ffmpegrust-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
